#!/bin/sh

version='0.3 [2016-06-08]'

printHelp() {
	cat <<-EOF
	Version: $version
	Usage: $(basename -- $0) [option] ...
	Selection options:
	-r, --regular     - show non-system accounts
	-s, --system      - show system accounts
	Output options:
	-i, --id          - sort output by id
	-l, --login       - sort output by login
	-t, --no-tabulate - do not tabulate output
	EOF
}

init_id_ranges() {
	gid_min=$(grep '^GID_MIN' /etc/login.defs | cut -d' ' -f2- | tr -d ' ')
	gid_max=$(grep '^GID_MAX' /etc/login.defs | cut -d' ' -f2- | tr -d ' ')
	gid_min=${gid_min:-1000}
	gid_max=${gid_max:-60000}
}

# IN: group-id (gid)
users_with_primary_group_id() {
	users=$(grep ":[0-9][0-9]*:$1:" /etc/passwd | cut -d':' -f1 | tr '\n' ',')
	users=${users%,}
	printf "%s" "${users:--}"
}

# IN: group-name
supplementary_users() {
	users=$(grep "^$1:" /etc/group | cut -d':' -f4)
	printf "%s" "${users:--}"
}

# OUT: groups with all users
groups_with_users() {
	init_id_ranges

	while read line; do
		primary_users=$(users_with_primary_group_id $(printf $line | cut -d':' -f3))
		other_users=$(          supplementary_users ${line%%:*})

		printf "$line" | awk -F':' '{ \
			if (("1" == "'"$all"'") \
				|| (("1" == "'"$regular"'") &&  ($3 >= '"$gid_min"') && ($3 <= '"$gid_max"')) \
				|| (("1" == "'"$system"'")  && (($3 <  '"$gid_min"') || ($3 >  '"$gid_max"')))) \
				print $1":"$2":"$3"':$primary_users:$other_users'" }'
	done < /etc/group
}

sort_output() {
	if [ "$sort_by_id" ]; then
		groups_with_users | sort -t':' -nk3
	elif [ "$sort_by_login" ]; then
		groups_with_users | sort
	else
		groups_with_users
	fi
}

prepend_header() {
	echo 'group:x:gid:primary:supplemental'
	echo '-----:-:---:-------:------------'
	sort_output
}

parse_args() {
	# defaults
	no_system_accounts=0

	# get input options
	while [ $# -gt 0 ]; do
		case "$1" in
			'-r'|'--regular'     ) regular=1            ;;
			'-s'|'--system'      ) system=1             ;;
			'-i'|'--id'          ) sort_by_id=1         ;;
			'-l'|'--login'       ) sort_by_login=1      ;;
			'-t'|'--no_tabulate' ) no_tabulate=1        ;;
			'-h'|'--help'    ) {                             printHelp; exit; } ;;
			'-V'|'--version' ) { echo "$(basename -- $0) $version";     exit; } ;;
			*                ) { echo "unknown option '$1'"; printHelp; exit; } ;;
		esac
		shift
	done

	if [ -n "$regular"    ] && [ -n "$system"       ]; then all=1;     fi
	if [ -z "$regular"    ] && [ -z "$system"       ]; then all=1;     fi

	if [ -z "$no_tabulate" ] && [ "$(type -t column)" = '' ]; then
		no_tabulate='no-column-command'
	fi
}


parse_args "$@"
if [ -n "$no_tabulate" ]; then
	sort_output
else
	prepend_header | column -ts':' --
fi

