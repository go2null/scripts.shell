#!/bin/sh

# ACCEPTS: a file (or directory path) in working tree or index
# RETURNS: coommit history of the file (or all files in directory tree).
# NOTES:   written to feed git-file-nuke to ensure renames are removed as well.

version='0.0.4+201511009'

print_help() {
	printf %s "\
  VERSION: $version

  USAGE: $(basename -- $0) [<options>] [--] <path>

  OPTIONS
  -m, --no-modifications - do not show file attributes nor content modifications
  -n, --name-only        - only display filenames, and only when it changed
  -h, --help             - Display this help screen and exit
  -V, --version          - Display version info and exit
  --                     - end of options, path is next

  DESCRIPTION
  * WARNING: backup (clone) your repo first!
  * path = file: list all commits where file changed.
  * path = directory: lists all commits for all files in its tree.
  * Paths must not contain newline characters.

  EXAMPLES
  $(basename -- $0) .ssh/id_rsa
  $(basename -- $0) Documents/
  "
}

parse_args() {
	# defaults
	unset name_only
	unset no_modifications
	unset path_name

	# get input options
	while [ $# -gt 0 ]; do
		case "$1" in
			'-n'|'--name-only'       ) name_only='--name-only'              ;;
			'-m'|'--no-modifications') no_modifications='--no-modifications';;
			'-h'|'--help'            ) { print_help;      exit;           } ;;
			'-V'|'--version'         ) { echo "$version"; exit;           } ;;
			'--'                     ) { path_name="$2";  break;          } ;;
			*                        ) { path_name="$1";  break;          } ;;
		esac
		shift
	done

	if [ -z "$path_name" ]; then
		printf '%s\n' 'Provide a path to lookup. See "--help".' >&2
		exit 1
	fi
}

# returns all files of interest, grouped by commit
directory_paths_raw() {
	git log --follow --all --format='//%h//' --name-only -- "$1" \
	| sed -e ':a;N;$!ba;s:\n\n::g'                               \
	| sort -u
}

# returns the first line, ie, one per commit
directory_paths_firsts () {
	printf '%s' "$@" | grep    '^//' | sed 's:^//.*//::'
}

# returns other files modified in commit.
# This is non-blank only if the original path was a directory,
# and so had multiple files matching the directory path.
directory_paths_others() {
	printf '%s' "$@" | grep -v '^//'
}

file_history() {
	git log --follow --all --format='%ad %h%x09%s%x09%an' --date='short' --name-status -- "$path_name" \
		| sed -e ':a;N;$!ba;s_\n\n_\t_g'                                                                 \
		| sed -e 's_^\(.*\)\t\(.*\)\t\(.*\)\t\(.\)[0-9]*\t\(.*\)_\4 \1 [\3] "\5" "\2"_'                  \
		      -e 's_\t_" -> "_'
}

main() {
	dir_paths_raw="$(   directory_paths_raw    "$path_name")"
	dir_paths_firsts="$(directory_paths_firsts "$dir_paths_raw")"
	dir_paths_others="$(directory_paths_others "$dir_paths_raw")"

	if [ "$dir_paths_others" ]; then
		# path is directory, recursively call self for each file in directory
		dir_paths="$(printf '%s\n' "$dir_paths_firsts" "$dir_paths_others" | sort -u)"
		old_ifs="$IFS"
		# the following is not POSIX, yet.
		IFS=$'\n'
		for p in $dir_paths; do
			$(basename -- $0) $name_only $no_modifications -- "$p"
		done
		IFS="$old_ifs"

	elif [ -z "$name_only" ]; then
		# path is a file, return one-line commit message
		if [ -z "$no_modifications" ]; then
			file_history
		else
			file_history | grep -v '^M'
		fi

	else
		# path is a file and caller requested only filename
		dir_paths="$(printf '%s\n' "$dir_paths_firsts" | sort -u)"
		printf '%s\n' "$dir_paths"
	fi
}

parse_args "$@"
main

# sed string ripped from:
# https://stackoverflow.com/questions/13447884/nicely-display-file-rename-history-in-git-log
# https://stackoverflow.com/questions/1251999/how-can-i-replace-a-newline-n-using-sed

